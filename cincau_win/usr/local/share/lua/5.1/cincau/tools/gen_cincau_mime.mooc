--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import "base.scratch"

--- generate cincau mime from nginx mime.types
---@param fname any @input file name
fn readConfig(fname) {
    guard fname and fname:len() > 0 else {
        print("moocscript tools/gen_cincau_mime.mooc scaffold/nginx/mime.types > base/mime_types.lua")
        return
    }
    fp = io.open(fname, "rb")
    guard fp else {
        return
    }
    defer {
        fp:close()
    }
    content = fp:read("*a")
    content = content:sub(9, content:len()-2)
    --print(content)
    --
    mime_tbl = {}
    for line in content:gmatch("[\r\n]*([^;]+);[\r\n]*") {
        line = line:gsub("[% ]+", ' '):sub(2)
        tbl = line:split(' ')
        for i=2, #tbl {
            mime_tbl[tbl[i]] = tbl[1]
        }
    }
    --
    keys = {}
    print('local mime_tbl = {')
    for k, v in pairs(mime_tbl) {
        kl = tostring(k:len() + 1)
        if not keys[kl] {
            keys[kl] = true
        }
        print("\t['." .. k .. "'] = '" .. v .. "',")
    }
    print('}')
    --
    table.sort(keys)
    print("local len_tbl = {")
    for i=1, 10 {
        if keys[tostring(i)] {
            print("\t" .. i .. ",")
        }
    }
    print("}")
    --
    print([[
local function getPathMIME(path)
    if not path or path:len() <= 0 then
        return
    end
    local plen = path:len()
    for _, klen in ipairs(len_tbl) do
        if plen <= klen then
            break
        end
        local fsuffix = path:sub(plen - klen + 1):lower()
        local mime = mime_tbl[fsuffix]
        if mime then
            return fsuffix, mime
        end
    end
end
local function appendSuffixMIME(fsuffix, mime)
    if fsuffix and mime then
        mime_tbl[fsuffix] = mime
    end
end
return {
    getPathMIME = getPathMIME,
    appendSuffixMIME = appendSuffixMIME
}]])
}

readConfig(...)