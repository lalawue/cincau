--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import NetCore from "ffi_mnet"
import Resp from "resp"


struct RedisCmd {

    _data = ""
    _chann = false

    --[[
        optino should be { ipv4 = '127.0.0.1', port = 6379, keep_alive = true, reuse_info used by runCMD }
        cmd_tbl should be { "SET", "KEY", "VALUE" },
        ret_func should be function(ret_value), ret_value = nil means server side disconnect
    ]]
    static fn _dummy_func() {
    }

    static fn runCMD(option, cmd_tbl, ret_func) {
        if type(cmd_tbl) ~= "table" {
            return false
        }
        -- prepare input
        ipv4 = type(option.ipv4) == "string" and option.ipv4 or "127.0.0.1"
        port = option.port and option.port or 6379
        ret_func = type(ret_func) == "function" and ret_func or Self._dummy_func
        -- open chann
        Self._data = ""
        Self._chann = option.reuse_info or NetCore.openChann("tcp")
        msg = ""
        if #cmd_tbl > 0 {
            msg = Resp.encode(unpack(cmd_tbl))
        } else {
            msg = Resp.encode(nil)
        }
        if Self._chann:state() == "state_connected" {
            if type(msg) == "string" {
                Self._chann:send(msg)
                msg = nil
            }
            return
        }
        callback = { chann, event_name, accept_chann, c_msg in
            if event_name == "event_connected" {
                if type(msg) == "string" {
                    chann:send(msg)
                    msg = nil
                } else {
                    ret_func(nil)
                }
            } elseif event_name == "event_recv" {
                Self._data = Self._data .. chann:recv()
                consumed, output, typ = Resp.decode(Self._data)
                if consumed == Self._data:len() {
                    Self._data = ""
                    if not option.keep_alive {
                        option.reuse_info = nil
                        chann:close()
                    } else {
                        option.reuse_info = chann
                    }
                    ret_func(output)
                } elseif consumed == Resp.EILSEQ {
                    -- Found illegal byte sequence
                    Self._data = ""
                    chann:close()
                    ret_func(nil)
                }
            } elseif event_name == "event_disconnect" {
                Self._data = ""
                chann:close()
                ret_func(nil)
            }
        }
        Self._chann:setCallback(callback)
        Self._chann:connect(ipv4, port)
        return true
    }
}

return RedisCmd
