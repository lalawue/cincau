--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import NetCore from "ffi_mnet"
import DnsCore from "bridge.ffi_mdns"
import HttpParser from "ffi_hyperparser"
import Request from "engine.request_core"
import Response from "engine.response_core"
import UrlCore from "base.url_core"
import FileManager from "base.file_manager"
import ThreadBroker from "bridge.thread_broker"
import Mediator from "bridge.mediator"
import SessionMgnt from "session.session_mgnt"

-- close chann and destroy http parser
fn _clientDestroy(chann) {
    cnt = chann._cnt
    cnt.http_parser:destroy()
    chann:close()
    ThreadBroker.removeThread(chann)
}

-- client reset
fn _clientReset(chann) {
    cnt = chann._cnt
    cnt.http_parser:reset()
    cnt.fd_tbl = {}
    cnt.multipart_info = {}
    ThreadBroker.removeThread(chann)
}

fn _updateRequest(req) {
    if req.method ~= "POST" {
        return
    }
    if Request.isXwwwFormUrlEncoded(req.header) or req.body:len() > 0 {
        req.post_args = UrlCore.parseQuery(req.body)
    } else {
        req.post_args = {}
    }
}

fn _suffix4(filename) {
    if filename:len() >= 4 {
        s = filename:find(".", filename:len() - 4, true)
        if s {
            return filename:sub(s)
        }
    }
    return ".bin"
}

-- store multipart/form-data to tmp/, put random name into multipart_info
fn _storeMultiPartData(cnt, http_tbl) {
    fd_tbl = cnt.fd_tbl
    method = http_tbl.method
    header = http_tbl.header
    if not Request.isMultiPartFormData(fd_tbl, method, header) {
        return false
    }
    contents = http_tbl.contents
    raw_data = contents and table.concat(contents) or ""
    Request.multiPartReadBody(
        fd_tbl,
        raw_data,
        { filename, content_type, data in
            info = cnt.multipart_info[#cnt.multipart_info]
            if data and info and info.filepath {
                FileManager.appendFile(info.filepath, data)
            } elseif filename and filename:len() > 0 {
                filepath = "tmp/" .. tostring(math.random(100000)) .. _suffix4(filename)
                cnt.multipart_info[#cnt.multipart_info + 1] = {
                    :filename,
                    :filepath,
                    :content_type
                }
            }
        }
    )
    http_tbl.contents = nil
    return true
}

fn _onError(msg) {
    print("\nPANIC : " .. tostring(msg) .. "\n")
    print(debug.traceback())
}

-- response option
local ResponseOption = {
    en_chunked_length : true, -- append chunked body length
    fn_chunked_callback : false,
    fn_set_header : false, -- construct header
    fn_set_status : false
}
ResponseOption.__index = ResponseOption

-- receive client data then parse to http method, path, header, content
fn _onClientEventCallback(chann, event_name, _) {
    if event_name == "event_recv" {
        data = chann:recv()
        if data == nil {
            _clientDestroy(chann)
            return
        }
        cnt = chann._cnt
        -- parse raw data to http protoco info
        ret_value, state, http_tbl = cnt.http_parser:process(data)
        if ret_value < 0 {
            return
        }
        if state == HttpParser.STATE_BODY_CONTINUE and http_tbl {
            _storeMultiPartData(cnt, http_tbl)
        }
        if state == HttpParser.STATE_BODY_FINISH and http_tbl {
            content = ""
            multipart_info = nil -- multipart/form-data
            if _storeMultiPartData(cnt, http_tbl) {
                multipart_info = cnt.multipart_info
            } elseif http_tbl.contents {
                content = table.concat(http_tbl.contents)
                http_tbl.contents = nil
            }
            -- create callback info
            http_callback = cnt.http_callback
            guard http_callback else {
                return
            }

            -- create req
            req = Request(http_tbl.method, http_tbl.url, http_tbl.header, content, multipart_info)
            req:updateRemoteIp(chann:addr().ip)
            _updateRequest(req)
            -- create response
            option = setmetatable({}, ResponseOption)
            option.fn_chunked_callback = { data in
                chann:send(data)
            }
            response = Response(option)
            co = coroutine.create({ _ in
                -- callback
                ret, emsg = xpcall(http_callback, _onError, cnt.config, req, response)
                -- finish response
                response:finishResponse()
                -- reset resources
                _clientReset(chann)
            })
            -- broker take thread
            ThreadBroker.addThread(chann, co)
            coroutine.resume(co)
        }
    } elseif event_name == "event_disconnect" {
        _clientDestroy(chann)
    }
}

-- public interface
--

struct Serv {

    svr_tcp = false

    -- run server, http_callback(config, req, response)
    fn run(config, http_callback) {
        logger = config.logger
        addr = NetCore.parseIpPort(config.ipport)
        guard type(addr.ip) == "string" and type(addr.port) == "number" else {
            logger.err("invalid ipport")
            return
        }
        logger.info("listen on %s:%d", addr.ip, addr.port)
        -- setup env
        math.randomseed(os.time())
        FileManager.setupSandboxEnv(config)
        -- create bind
        NetCore.init()
        DnsCore.init(config)
        self.svr_tcp = NetCore.openChann("tcp")
        self.svr_tcp:listen(addr.ip, addr.port, 1024)
        self.svr_tcp:setCallback({ _, event_name, accept in
            if event_name == "event_accept" and accept ~= nil {
                accept._cnt = {
                    config : config,
                    http_callback : http_callback,
                    http_parser : HttpParser.createParser("REQUEST"),
                    fd_tbl : {},
                    multipart_info : {}
                }
                accept:setCallback(_onClientEventCallback)
            }
        })
        -- mnet event loop
        poll_wait = config.poll_wait or 50
        ssmgnt_outdate = config.session_outdate
        while true {
            NetCore.poll(poll_wait)
            Mediator.servLoop()
            SessionMgnt.clearOutdate(ssmgnt_outdate)
        }
    }
}

return Serv
