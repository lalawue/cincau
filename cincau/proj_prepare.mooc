--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

--
-- generate demo project
--

core_dir, proj_dir, engine_type = ...

package.path = package.path .. string.format(";%s/?.lua", core_dir)
import Logger from "base.logger"
import FileManager from "base.file_manager"

-- check input params
fn _check_params(core_dir, proj_dir, engine_type) {
    if core_dir == nil or proj_dir == nil or engine_type == nil {
        print("please provide core_dir proj_dir engine_type !")
        return false
    }
    engine_type = string.lower(engine_type)
    if engine_type == "mnet" or engine_type == "nginx" {
        print("create cincau demo project with:")
        print("core_dir:", core_dir)
        print("proj_dir:", proj_dir)
        print("engine_type:", engine_type)
        return true
    }
}

-- operation function
_runCmd = os.execute

fn _mkDir(dir) {
    cmd = "mkdir -p " .. dir
    print(cmd)
    _runCmd(cmd)
}

fn _copyFile(src, dest) {
    cmd = "cp -af " .. src .. " " .. dest
    print(cmd)
    _runCmd(cmd)
}

-- create demo app
fn _createAppSkeleton(core_dir, proj_dir, engine_type) {
    print("---")
    app_dir = proj_dir .. "/app/"
    _mkDir(app_dir)
    -- copy engine
    engine_dir = core_dir .. "/engine/" .. engine_type
    _copyFile(engine_dir .. "/server.mooc", app_dir .. "/server.mooc")
    -- copy others
    _copyFile(core_dir .. "/scaffold/demo/*", app_dir)
    -- copy config
    scaffold_dir = core_dir .. "/scaffold/" .. engine_type
    _copyFile(scaffold_dir .. "/config.mooc", app_dir .. "/config.mooc")
}

-- create project skeleton
fn _createProjectSkeleton(core_dir, proj_dir, engine_type) {
    if not _check_params(core_dir, proj_dir, engine_type) {
        return false
    }
    -- create proj dirs
    print("--")
    proj_tbl = {"/tmp", "/" .. Logger.getOutputDir()}
    for _, v in ipairs(proj_tbl) {
        _mkDir(proj_dir .. v)
    }
    -- copy scaffold
    scaffold_dir = core_dir .. "/scaffold/" .. engine_type
    _copyFile(scaffold_dir .. "/run_app.sh", proj_dir .. "/run_app.sh")
    if engine_type == "nginx" {
        local conf_dir = proj_dir .. "/config"
        _mkDir(conf_dir)
        _copyFile(scaffold_dir .. "/mime.types", conf_dir .. "/mime.types")
        _copyFile(scaffold_dir .. "/nginx.conf", conf_dir .. "/nginx.conf")
    }
    -- create app dir
    _createAppSkeleton(core_dir, proj_dir, engine_type)
}

-- start creation
_createProjectSkeleton(core_dir, proj_dir, engine_type)
