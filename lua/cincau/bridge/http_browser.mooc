--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import TcpRaw from "bridge.tcp_stream.tcp_raw"
import FileManager from "base.file_manager"
import UrlCore from "base.url_core"
import HttpParser from "ffi-hyperparser"

type = type
sfmt = string.format
pairs = pairs
concat = table.concat
require = require
tonumber = tonumber
coRunning = coroutine.running

-- act like curl, accept encoding gzip
fn _buildHttpRequest(method, url_info, option, data) {
    if type(method) ~= "string" {
        return nil
    }
    sub_path = "/"
    if url_info.path and url_info.path:len() > 0 {
        sub_path = url_info.path
    }
    if type(url_info.query) == "table" {
        query = UrlCore.buildQuery(url_info.query)
        if query and query:len() > 0 {
            sub_path = sub_path .. "?" .. query
        }
    }
    tbl = {}
    tbl[#tbl + 1] = sfmt("%s %s HTTP/1.1", method, sub_path)
    if url_info.host {
        tbl[#tbl + 1] = "Host: " .. url_info.host
    }
    tbl[#tbl + 1] = "User-Agent: cincau/v20200803"
    if option and option.inflate {
        tbl[#tbl + 1] = "Accept-Encoding: gzip"
    }
    if option and type(option.header) == "table" {
        for k, v in pairs(option.header) {
            tbl[#tbl + 1] = k .. ": " .. v
        }
    }
    if data {
        tbl[#tbl + 1] = "Content-Length: " .. data:len()
    }
    tbl[#tbl + 1] = "\r\n"
    if data {
        tbl[#tbl + 1] = data
    }
    return concat(tbl, "\r\n")
}

fn _processRecvData(brw, data) {
    ret, state, http_tbl = brw._hp:process(data)
    if ret < 0 {
        return ret
    }
    return ret, state, http_tbl
}

-- return empty when gzip and not finish
fn _constructContent(http_tbl, option, is_finish) {
    if http_tbl.contents == nil {
        return ""
    }
    output_content = ""
    encoding_desc = http_tbl.header["Content-Encoding"]
    is_gzip = encoding_desc == "gzip"
    if is_gzip and is_finish {
        output_content = FileManager.inflate(concat(http_tbl.contents))
    } elseif not is_gzip {
        output_content = concat(http_tbl.contents)
    }
    if output_content:len() > 0 {
        http_tbl.contents = nil
    }
    return output_content
}

struct Browser {

    _chann = false
    _hp = false
    _url_info = false

    -- create browser in coroutine
    fn init() {
        if coRunning() == nil {
            return false
        }
    }

    --[[
        request HTTP/HTTPS URL
        option = {
            inflate = false, -- default
            header = header, -- table
            recv_cb = function(header_tbl, data_string) end, -- for receiving data
        }
        return header_tbl, data_string (if no recv_cb function set)
    ]]
    static fn _dummy_cb() {
    }

    fn requestURL(site_url, option) {
        if type(site_url) ~= "string" {
            return false
        }

        if self._chann {
            return false
        }

        url_info = UrlCore.parse(site_url)
        if not url_info {
            return false
        }

        if type(url_info.scheme) ~= "string" {
            return false
        }

        guard url_info.scheme == "http" or url_info.scheme == "https" else {
            return false
        }

        if type(url_info.host) ~= "string" {
            return false
        }

        self._url_info = url_info

        ipv4 = nil
        port = nil
        ipv4_pattern = "%d-%.%d-%.%d-%.%d+"
        if url_info.host:find(ipv4_pattern) {
            ipv4 = url_info.host:match("(" .. ipv4_pattern .. ")")
            port = url_info.port
        } else {
            ret = require("bridge.mediator").queryDomain(url_info.host)
            if not ret {
                return false
            }
            ipv4 = ret
            port = url_info.port
        }

        self._chann = TcpRaw()
        if url_info.scheme == "http" {
            port = port and tonumber(port) or 80
        } else {
            port = port and tonumber(port) or 443
        }
        url_info = nil -- reset nil

        brw = self
        recv_cb = option and option.recv_cb or Self._dummy_cb
        callback = { chann, event_name, _, _ in
            if event_name == "event_connected" {
                brw._hp = HttpParser.createParser("RESPONSE")
                local data = _buildHttpRequest("GET", brw._url_info, option)
                chann:send(data)
            } elseif event_name == "event_recv" {
                ret, state, http_tbl = _processRecvData(brw, chann:recv())
                if ret < 0 {
                    brw:closeURL()
                    brw = nil
                    recv_cb(nil, nil)
                } elseif state == HttpParser.STATE_BODY_CONTINUE and http_tbl {
                    content = _constructContent(http_tbl, option, false)
                    if content:len() > 0 {
                        recv_cb(http_tbl, content)
                    }
                } elseif state == HttpParser.STATE_BODY_FINISH and http_tbl {
                    -- FIXME: consider status code 3XX
                    -- FIXME: support cookies
                    -- FIXME: support keep-alive
                    content = _constructContent(http_tbl, option, true)
                    brw:closeURL()
                    brw = nil
                    recv_cb(http_tbl, content)
                    recv_cb(http_tbl, nil)
                }
            } elseif event_name == "event_disconnect" {
                brw:closeURL()
                brw = nil
                recv_cb(nil, nil)
            }
        }
        self._chann:setCallback(callback)
        self._chann:connectAddr(ipv4, port)
        return true
    }

    -- return true/false, http header, data, one at a time
    fn postURL(site_url, data) {
        if type(site_url) ~= "string" or not coRunning() {
            return false
        }
        return false
    }

    fn closeURL() {
        if self._chann {
            self._chann:closeChann()
            self._chann = false
        }
        if self._hp {
            self._hp:destroy()
            self._hp = false
        }
        self._url_info = false
    }
}

return Browser
