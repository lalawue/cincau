--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

-- controller was a business logic block for data processing
--

import Base from "base.scratch"
import FileManager from "base.file_manager"

fn _debugOn(config) {
    return config and config.debug_on
}

-- page instance
--

class BasePage {

    _inited = false

    fn init() {
    }

    fn process() {        
    }
}

-- master page interface
--
struct MasterPage {

    -- hold all named page instance
    _pages = {}

    static fn process(name, config, ...) {
        assert(type(name) == "string", "invalid controller name")
        ctrl = Self._pages[name]
        if type(ctrl) ~= "table" {
            -- assume all page business under pages dir
            libname = "pages." .. name
            ret, lib = xpcall(require, Base.tracebackHandler, libname)
            if not ret {
                config.logger.err("failed to load page '%s':%s", libname, lib)
                return
            }
            ctrl = lib(config)
            assert(type(ctrl) == "table", "page not exist")
            if not _debugOn(config) {
                Self._pages[name] = ctrl
            }
        }
        -- process data
        ctrl:process(config, ...)
    }

    -- default 'Content-Type: text/plain;'
    static fn staticContent(response, path, content_type) {
        if type(path) ~= "string" {
            return
        }
        content_type = content_type or "text/plain"
        response:setHeader("Content-Type", content_type)
        if FileManager.stat(path) {
            response:appendBody(FileManager.readFile(path))
        } elseif FileManager.stat(path .. ".gz") {
            response:setHeader("Content-Encoding", "gzip")
            response:appendBody(FileManager.readFile(path .. ".gz"))
        }
    }
}

return {
    :BasePage,
    :MasterPage,
}
