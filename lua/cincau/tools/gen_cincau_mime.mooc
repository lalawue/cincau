--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

--- generate cincau mime from nginx mime.types
---@param fname any @input file name
fn readConfig(fname) {
    guard fname and fname:len() > 0 else {
        print("Please provide file name !")
        return
    }
    fp = io.open(fname, "rb")
    guard fp else {
        return
    }
    defer {
        fp:close()
    }
    --
    mime_tbl = {}
    mime = ''
    for line in fp:read("*a"):gmatch("([^;]+;)[\r\n]*") {
        line = line:gsub("[% ]+", ' ')
        index = 0
        last_i = 0
        for i=1, line:len() {
            if line:sub(i, i) == ' ' or line:sub(i, i) == ';' {
                index += 1
                switch index {
                case 1:
                    mime = line:sub(last_i + 1, i - 1)
                default:
                    mime_tbl[line:sub(last_i + 1, i - 1)] = mime
                    --print(index, line:sub(last_i + 1, i - 1), mime)
                }
                last_i = i
            }
        }
    }
    --
    keys = {}
    print('local mime_tbl = {')
    for k, v in pairs(mime_tbl) {
        kl = tostring(k:len() + 1)
        if not keys[kl] {
            keys[kl] = true
        }
        print("\t['." .. k .. "'] = '" .. v .. "',")
    }
    print('}')
    --
    table.sort(keys)
    print("local len_tbl = {")
    for i=1, 10 {
        if keys[tostring(i)] {
            print("\t" .. i .. ",")
        }
    }
    print("}")
    --
    print([[
local function getPathMIME(path)
    if not path or path:len() <= 0 then
        return
    end
    local plen = path:len()
    for _, klen in ipairs(len_tbl) do
        if plen <= klen then
            break
        end
        local fsuffix = path:sub(plen - klen + 1):lower()
        local mime = mime_tbl[fsuffix]
        if mime then
            return fsuffix, mime
        end
    end
end
return {
	getPathMIME = getPathMIME
}]])
}

readConfig(...)