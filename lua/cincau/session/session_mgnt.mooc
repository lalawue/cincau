--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

-- session was server in memory kv store, can keep any thing
--

import Cookie from "cincau.session.cookie_core"
import UTime from "cincau.base.ffi_utime"
import SHA from "cincau.base.sha2"
import MMKV from "ffi-mmkv"

otime = os.time
otype = type
omax = math.max

-- session info in cookies, uuid = md5(utime)
class Session {

    _outdate = false
    _logger = false

    -- record last clear outdated otime
    _last_clear_ot = 0

    -- [uuid] = uu_session { tm { =uuid, =utime, other_keys... }}
    _mmkv_sessions = false

    static fn init(config) {
        Self._outdate = config.session.outdate
        Self._logger = config.logger
        Self._last_clear_ot = otime()
        Self._mmkv_sessions = MMKV("sessions", config.session.dir, true)
    }

    --
    static fn uuidFromReq(req, skey) {
        guard req and skey else {
            return
        }
        return req.cookies[skey]
    }

    -- check session exist, from req
    static fn inSession(req, skey) {
        guard req and skey else {
            return false
        }
        uuid = req.cookies[skey]
        uu_session = Self._mmkv_sessions:get(uuid)
        if uu_session and uu_session.tm {
            Self._updateTime(uuid, uu_session)
        }
        return (uu_session and true) or false
    }

    --[[ store session info to response using 'Set-Cookie'
    local options = [
        max_age = 3600,
        domain = ".example.com",
        path = "/",
        expires = time,
        http_only = true,
        secure = true
    ]
    local expected =
        "foo=bar; Max-Age=3600; Domain=.example.com; " ..
        "Path=/; Expires=Wed, 23 Apr 2014 13:01:14 GMT; " ..
        "HttpOnly; Secure"
    ]]
    static fn createSession(req, response, skey, options) {
        if not response or Self.inSession(req, skey) {
            return
        }
        -- set cookie to respoinse
        utime = UTime.timeStamp()
        uuid = SHA.md5(utime)
        cookie_str = Cookie.build({[skey] = uuid}, options)
        response:setHeader("Set-Cookie", cookie_str)
        -- set cookie to req
        req.cookies[skey] = uuid
        -- create session table
        tm = {
            =uuid,
            =utime
        }
        uu_session = { =tm }
        Self._mmkv_sessions:set(uuid, uu_session, Self._outdate)
        Self._logger.info("set utime: \(utime)")
        return uuid
    }

    -- check in session first, clear session hkey, hval table
    static fn clearSession(req, skey) {
        guard req and skey else {
            return false
        }
        return Self.clearSessionUUID(req.cookies[skey])
    }

    -- clear session with UUID
    static fn clearSessionUUID(uuid) {
        guard uuid else {
            return false
        }
        uu_session = Self._mmkv_sessions:get(uuid)
        if typewith("T", uu_session) {
            Self._mmkv_sessions:rm(uuid)
            Self._logger.info("rm utime: \(uu_session.tm.utime)")
            return true
        }
        return false
    }

    -- check in session first, get hval from session with hkey
    static fn getValue(req, skey, hkey) {
        guard req and skey and hkey else {
            return
        }
        uuid = req.cookies[skey] or "#"
        uu_session = Self._mmkv_sessions:get(uuid)
        guard uu_session else {
            return
        }
        Self._updateTime(uuid, uu_session)
        return uu_session[hkey]
    }

    -- check in session first, set hkey, hval
    static fn setValue(req, skey, hkey, hval) {
        guard req and skey and hkey and hval else {
            return false
        }
        uuid = req.cookies[skey] or "#"
        uu_session = Self._mmkv_sessions:get(uuid)
        guard uu_session else {
            return false
        }
        uu_session[hkey] = hval
        Self._updateTime(uuid, uu_session)
        return true
    }

    -- clear outdated session in monitor process
    static fn clearOutdated(seconds) {
        ot = otime()
        seconds = omax(seconds, 60)
        guard ot > Self._last_clear_ot + seconds else {
            return
        }
        Self._last_clear_ot = ot
        Self._mmkv_sessions:trim()
        Self._logger.info("clear outdated in \(ot), count: \(Self._mmkv_sessions:count())")
    }

    -- update time struct, push to last
    static fn _updateTime(uuid, uu_session) {
        guard typewith("ST", uuid, uu_session) else {
            Self._logger.warn("invalid uu_session: \(uuid), \(uu_session)")
            return
        }
        tm = uu_session.tm
        o_utime = tm.utime
        tm.utime = UTime.timeStamp()
        Self._mmkv_sessions:set(uuid, uu_session, Self._outdate)
        Self._logger.info("update utime: \(o_utime) -> \(tm.utime)")
    }
}

return Session