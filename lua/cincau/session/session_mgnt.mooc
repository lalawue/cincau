--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

-- session was server in memory kv store, can keep any thing
--

import Cookie from "cincau.session.cookie_core"
import UUIDCore from "cincau.base.uuid_core"
import List from "linked-list"
import CJson from "cjson"

otime = os.time

-- session info in cookies
struct Session {

    _sessions = {}
    _lst = List.new()
    _config = false
    _mproc = false

    static fn init(config) {
        UUIDCore.seed()
        if config.multiprocess and config.multiprocess.worker_count > 0 {
            Self._config = config
            Self._mproc = config.multiprocess
            Self._mproc.workerEventDelegates["WORKER_SESSION"] = { data in
                uuid, udata = unpack(data:split(":", 1))
                uu_session = CJson.decode(udata)
                Self._sessions[uuid] = uu_session
                if uu_session and uu_session.tm {
                    Self._updateTime(uuid, uu_session, true)
                }
                config.logger.info("session(\(Self._mproc.worker_index)) recv \(uuid)")
            }
        }
    }

    --
    static fn uuidFromReq(req, skey) {
        guard req and skey else {
            return
        }
        return req.cookies[skey]
    }

    -- update time struct, push to last
    static fn _updateTime(uuid, uu_session, not_sync) {
        now_ti = otime()
        tm = uu_session.tm
        tm.time = now_ti
        Self._lst:remove(tm)
        Self._lst:pushl(tm)
        if not_sync {
            tm.sync = now_ti
        } elseif Self._mproc and (now_ti - tm.sync > Self._config.session.sync_time) {
            tm.sync = now_ti
            Self._mproc.sendEventFn(1, "WORKER_SESSION", "\(uuid):\(CJson.encode(uu_session))")
        }
    }

    -- check session exist, from req
    static fn inSession(req, skey) {
        guard req and skey else {
            return false
        }
        uuid = req.cookies[skey]
        uu_session = Self._sessions[uuid]
        if uu_session and uu_session.tm {
            Self._updateTime(uuid, uu_session)
        }
        return (uu_session and true) or false
    }

    --[[ store session info to response using 'Set-Cookie'
    local options = [
        max_age = 3600,
        domain = ".example.com",
        path = "/",
        expires = time,
        http_only = true,
        secure = true
    ]
    local expected =
        "foo=bar; Max-Age=3600; Domain=.example.com; " ..
        "Path=/; Expires=Wed, 23 Apr 2014 13:01:14 GMT; " ..
        "HttpOnly; Secure"
    ]]
    static fn createSession(req, response, skey, options) {
        if not response or Self.inSession(req, skey) {
            return
        }
        -- set cookie to respoinse
        uuid = UUIDCore.new()
        cookie_str = Cookie.build({[skey] = uuid}, options)
        response:setHeader("Set-Cookie", cookie_str)
        -- set cookie to req
        req.cookies[skey] = uuid
        -- create session table
        tm = {
            sync = otime(),
            time = otime()
        }
        uu_session = { =tm }
        Self._sessions[uuid] = uu_session
        Self._lst:pushl(tm)
        if Self._mproc {
            Self._mproc.sendEventFn(1, "WORKER_SESSION", "\(uuid):\(CJson.encode(uu_session))")
        }
        return uuid
    }

    -- check in session first, clear session hkey, hval table
    static fn clearSession(req, skey) {
        guard req and skey else {
            return false
        }
        uuid = req.cookies[skey]
        uu_session = Self._sessions[uuid]
        if uuid and uu_session {
            Self._lst:remove(uu_session.tm)
            Self._sessions[uuid] = nil
            if Self._mproc {
                Self._mproc.sendEventFn(1, "WORKER_SESSION", "\(uuid): ")
            }
        }
        return true
    }

    -- clear session with UUID
    static fn clearSessionUUID(uuid) {
        guard uuid else {
            return
        }
        uu_session = Self._sessions[uuid]
        if uu_session {
            Self._lst:remove(uu_session.tm)
            Self._sessions[uuid] = nil
        }
    }

    -- check in session first, get hval from session with hkey
    static fn getValue(req, skey, hkey) {
        guard req and skey and hkey else {
            return
        }
        uuid = req.cookies[skey]
        uu_session = Self._sessions[uuid]
        guard uuid and uu_session else {
            return
        }
        Self._updateTime(uuid, uu_session)
        return uu_session[hkey]
    }

    -- check in session first, set hkey, hval
    static fn setValue(req, skey, hkey, hval) {
        guard req and skey and hkey and hval else {
            return false
        }
        uuid = req.cookies[skey]
        uu_session = Self._sessions[uuid]
        guard uuid and uu_session else {
            return false
        }
        uu_session[hkey] = hval
        Self._updateTime(uuid, uu_session)
        if Self._mproc {
            Self._mproc.sendEventFn(1, "WORKER_SESSION", "\(uuid):\(CJson.encode(uu_session))")
        }
        return true
    }

    -- clear outdate session
    static fn clearOutdate(seconds) {
        now = otime()
        repeat {
            tm = Self._lst:first()
            if not tm or now - tm.time < seconds {
                break
            }
            Self._lst:popf()
            Self._sessions[tm.uuid] = nil
        } until tm == nil
    }
}

return Session
