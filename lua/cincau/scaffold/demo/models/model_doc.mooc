--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

import FileManager from "base.file_manager"

_format = string.format

struct Model {
    _paragraphs = {}
    _md_tbl = {"^# ", "^## ", "^### ", "^```", "^%-"}
    _h5_tbl = {"h2", "h3", "h4", "pre", "li"}

    -- load model
    fn loadModel() {
        content = FileManager.readFile("app/static/README.md")
        paragraphs = {}
        for _, v in ipairs(content:split("\n")) {
            if v:len() > 0 {
                paragraphs[#paragraphs + 1] = v
            }
        }
        self._paragraphs = self:md2html(paragraphs)
    }

    -- replace line start with '#' to 'h1', ...
    fn md2html(paragraphs) {
        in_mtag = false
        last_mtag = ""
        for pi, line in ipairs(paragraphs) {
            mtag = ""
            -- start with mtag
            for i, v in ipairs(self._md_tbl) {
                if line:startwith(v) {
                    mtag = v
                    line, in_mtag = self:mtag2htag(line, mtag, self._h5_tbl[i], last_mtag, in_mtag)
                    last_mtag = mtag
                    break
                }
            }
            -- no mtag begin
            if line:len() > 0 and mtag:len() <= 0 {
                line, in_mtag = self:mtag2htag(line, mtag, "p", last_mtag, in_mtag)
            }
            -- store value
            paragraphs[pi] = line
        }
        -- replace link and tidy pre tag
        return self:htagReplace(paragraphs)
    }

    -- add '<ul>' and </ul>
    fn mtag2htag(line, mtag, htag, last_mtag, in_mtag) {
        mpre = "^```"
        if mtag == mpre {
            -- ``` and pre
            in_mtag = not in_mtag
            pattern = in_mtag and (mpre .. "%a+") or mpre
            line = line:gsub(pattern, in_mtag and "<pre><code>" or "</code></pre>")
        } elseif not in_mtag {
            -- h and li transform
            if mtag:len() > 0 {
                line = line:gsub(mtag, _format("<%s>", htag)) .. _format("</%s>", htag)
            } else {
                line = _format("<%s>", htag) .. line .. _format("</%s>", htag)
            }
            -- detect first and last li
            mli = "^%-"
            if mtag == mli and last_mtag ~= mli {
                line = "<ul>" .. line
            } elseif mtag ~= mli and last_mtag == mli {
                line = "</ul>" .. line
            }
        }
        return line, in_mtag
    }

    -- nested code between <pre> and </pre>, and links
    fn htagReplace(paragraphs) {
        tbl = {}
        padding = ""
        for _, v in ipairs(paragraphs) {
            if v:startwith("<pre>") {
                padding = v
            } elseif v:endwith("</pre>") {
                tbl[#tbl] = tbl[#tbl] .. v
            } else {
                -- replace mardown's [name](link) to htmls
                v = v:gsub("%[(.-)%]%((.-)%)", '<a href="%2">%1</a>')
                tbl[#tbl + 1] = padding .. v
                padding = ""
            }
        }
        return tbl
    }

    fn getParagraphs() {
        return self._paragraphs
    }
}

return Model
