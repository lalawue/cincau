--
-- Copyright (c) 2020 lalawue
--
-- This library is free software; you can redistribute it and/or modify it
-- under the terms of the MIT license. See LICENSE for details.
--

-- export to global

import Serpent from "base.serpent"

-- string
--

fn string:split(sSeparator, nMax, bRegexp) {
    assert(sSeparator ~= "")
    assert(nMax == nil or nMax >= 1)
    aRecord = {}
    if self:len() > 0 {
        bPlain = not bRegexp
        nMax = nMax or -1
        nField, nStart = 1, 1
        nFirst, nLast = self:find(sSeparator, nStart, bPlain)
        while nFirst and nMax ~= 0 {
            aRecord[nField] = self:sub(nStart, nFirst - 1)
            nField = nField + 1
            nStart = nLast + 1
            nFirst, nLast = self:find(sSeparator, nStart, bPlain)
            nMax = nMax - 1
        }
        aRecord[nField] = self:sub(nStart)
    }
    return aRecord
}

-- table
--

fn table.dump(tbl) {
    print(Serpent.block(tbl))
}

-- return a readonly table
fn table.readonly(tbl, err_message) {
    return setmetatable({}, {
            __index : tbl,
            __newindex : { t, k, v in
                error(err_message, 2)
            }
        }
    )
}

fn _deep_copy(object, lookup_table) {
    if type(object) ~= "table" {
        return object
    } elseif lookup_table[object] {
        return lookup_table[object]
    }
    new_object = {}
    lookup_table[object] = new_object
    for key, value in pairs(object) {
        new_object[_deep_copy(key, lookup_table)] = _deep_copy(value, lookup_table)
    }
    return setmetatable(new_object, getmetatable(object))
}

if table.clone == nil {
    fn table.clone(o) {
        return _deep_copy(o, {})
    }
}

if table.isempty == nil {
    fn table.isempty(t) {
        return type(t) == "table" and _G.next(t) == nil
    }
}

if table.isarray == nil {
    fn table.isarray(t) {
        if type(t) ~= "table" {
            return false
        }
        i = 0
        for _ in pairs(t) {
            i = i + 1
            if t[i] == nil {
                return false
            }
        }
        return true
    }
}

fn _startwith(s1, s2, is_reverse) {
    if type(s1) ~= "string" or type(s2) ~= "string" {
        return false
    }
    t1 = is_reverse and s1:reverse() or s1
    t2 = is_reverse and s2:reverse() or s2
    return t1:find(t2) == 1
}

fn string.startwith(s1, s2) {
    return _startwith(s1, s2, false)
}

fn string.endwith(s1, s2) {
    return _startwith(s1, s2, true)
}

-- io
--

io.printf = fn(fmt, ...) {
    if not fmt {
        os.exit(0)
    }
    print(string.format(fmt, ...))
}

-- language
--

-- validate input parameter is valid type described in type_desc, only 1 depth
_type_string = {
    ["I"] : "nil",
    ["N"] : "number",
    ["S"] : "string",
    ["B"] : "boolean",
    ["T"] : "table",
    ["F"] : "function",
    ["D"] : "thread",
    ["U"] : "userdata"
}

export struct Lang {

    static fn valid(type_desc, ...) {
        for i = 1, type_desc:len(), 1 {
            val = select(i, ...)
            if type(val) ~= _type_string[type_desc:sub(i, i)] {
                return false
            }
        }
        return true
    }
}

fn tracebackHandler(msg) {
    print("\nPANIC : " .. tostring(msg) .. "\n")
    print(debug.traceback())
}

return {
    :tracebackHandler
}
